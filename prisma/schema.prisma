// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venue {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  venueName String      @map("venue_name")
  Product   Product[]
  Vendor    Vendor[]
  VenueArea VenueArea[]
  Order     Order[]

  @@map("venues")
}

model Product {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName       String  @map("display_name")
  // What does a unit of the product look like: Bottle / Stubby / Keg / Sachet / Tub
  unitType          String  @map("unit_type")
  // What does the product ship in: Carton / Keg / Box / Tub
  packageType       String  @map("package_type")
  // How many unit types in a package type eg: 24 for carton of beer. A keg would simply be 1 - unless ordering kegs by the pallet
  packageQuantity   Int     @map("package_quantity")
  // Numerical size. A 600mL bottle of soft-drink would be 600 
  size              Int?
  // Related to size: g / mL 
  unitOfMeasurement String? @map("unit_of_measurement")

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])

  vendorId String? @map("vendor_id") @db.Uuid
  vendor   Vendor? @relation(fields: [vendorId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  ProductLocations ProductLocations[]
  OrderItem        OrderItem[]

  @@map("products")
}

model Vendor {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorName    String  @map("vendor_name")
  repName       String? @map("rep_name")
  contactNumber String? @map("contact_number")

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])

  Product Product[]

  @@map("vendors")
}

model VenueArea {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  areaName String @map("area_name")

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])

  ProductLocations ProductLocations[]

  @@map("venue_areas")
}

model ProductLocations {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sortedOrder Int    @map("sorted_order")
  parLevel    Int?   @map("par_level")

  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  areaId    String      @map("area_id") @db.Uuid
  venueArea VenueArea   @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderItem OrderItem[]

  @@map("product_locations")
}

model Order {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  OrderItem OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderId String @map("order_id") @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productLocationId String           @map("product_location_id") @db.Uuid
  productLocation   ProductLocations @relation(fields: [productLocationId], references: [id])

  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  @@id([orderId, productLocationId])
  @@map("order_items")
}

model UnitType {
  unitType String @id @map("unit_type")
}

model PackageType {
  packageType String @id @map("package_type")
}

model UnitOfMeasurement {
  unitOfMeasurement String @id @map("unit_of_measurement")
}
