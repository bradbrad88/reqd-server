// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Venue {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  venueName       String            @map("venue_name")
  Product         Product[]
  VenueArea       VenueArea[]
  Order           Order[]
  PreferredVendor PreferredVendor[]
  Inventory       Inventory[]

  @@map("venues")
}

model Product {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName String @map("display_name")

  // What does a unit of the product look like: Bottle / Stubby / Keg / Sachet / Tub
  unitTypeId String   @map("unit_type")
  unitType   UnitType @relation(fields: [unitTypeId], references: [value], onUpdate: Cascade)

  // Numerical size. A 600mL bottle of soft-drink would be 600 
  size                Int?
  // Related to size: g / mL 
  unitOfMeasurementId String?            @map("unit_of_measurement")
  unitOfMeasurement   UnitOfMeasurement? @relation(fields: [unitOfMeasurementId], references: [value], onUpdate: Cascade, onDelete: Cascade)

  venueId String? @map("venue_id") @db.Uuid
  venue   Venue?  @relation(fields: [venueId], references: [id])

  inventory    Inventory[]
  vendorRange  VendorRange[]
  orderProduct OrderProduct[]

  @@map("products")
}

model Inventory {
  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  defaultVendorProductId String?      @map("default_vendor_product_id") @db.Uuid
  defaultVendorProduct   VendorRange? @relation(fields: [defaultVendorProductId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@id([venueId, productId])
  @@index([venueId])
  @@map("inventory")
}

model Vendor {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vendorName String  @map("vendor_name")
  logo       String?

  preferredVendor PreferredVendor[]
  vendorRange     VendorRange[]

  @@map("vendors")
}

model PreferredVendor {
  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vendorId String @map("vendor_id") @db.Uuid
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  repName       String? @map("rep_name")
  contactNumber String? @map("contact_number")
  email         String?

  @@id([vendorId, venueId])
  @@index([venueId])
  @@map("preferred_vendors")
}

model VendorRange {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  vendorId String @map("vendor_id") @db.Uuid
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // A vendor can supply a product in different ways - by the carton or by the pallet etc. A venue should be able to select the method (as prices may vary and stock-on-hand constraints also) that most suits them.
  packageTypeId String      @map("package_type_id")
  packageType   PackageType @relation(fields: [packageTypeId], references: [value])

  packageQuantity Int         @map("package_quantity")
  inventory       Inventory[]

  @@map("vendor_products")
}

model VenueArea {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  areaName String @map("area_name")

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  storageSpaces      Json @map("area_locations") @db.Json
  storageSpaceLayout Json @map("storage_space_layout") @db.Json
  productLines       Json @map("product_lines") @db.Json
  currentIdSequence  Int  @map("current_id_sequence")

  @@index([venueId])
  @@map("venue_areas")
}

model Order {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  venueId String @map("venue_id") @db.Uuid
  venue   Venue  @relation(fields: [venueId], references: [id])

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  vendorSummary Json           @map("vendor_summary") @db.Json
  orderProduct  OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  orderId String @map("order_id") @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId String  @map("product_id") @db.Uuid
  product   Product @relation(fields: [productId], references: [id])

  quantity      Int
  supplyDetails Json? @map("supply_details") @db.Json

  @@id([orderId, productId])
  @@map("order_product")
}

model UnitType {
  value  String @id @map("unit_type")
  plural String

  product Product[]

  @@map("unit_type")
}

model PackageType {
  value  String @id @map("package_type")
  plural String

  vendorRange VendorRange[]

  @@map("package_type")
}

model UnitOfMeasurement {
  value String @id @map("unit_of_measurement")

  product Product[]

  @@map("unit_of_measurement")
}
